import math


def print_board(board):
    for row in board:
        print(' '.join(row))
    print()


def check_winner(board, player):
    win_states=[
        [board[0][0],board[0][1],board[0][2]],
        [board[1][0],board[1][1],board[1][2]],
        [board[2][0],board[2][1],board[2][2]],
        [board[0][0],board[1][0],board[2][0]],
        [board[0][1],board[1][1],board[2][1]],
        [board[0][2],board[1][2],board[2][2]],
        [board[0][0],board[1][1],board[2][2]],
        [board[2][0],board[1][1],board[0][2]],
    ]
    return [player,player,player]in win_states


def check_draw(board):
    return all(cell!=' 'for row in board for cell in row)


def minimax(board,depth,is_maximizing, alpha, beta):
    if check_winner(board,'O'):
        return 1
    if check_winner(board,'X'):
        return -1
    if check_draw(board):
        return 0

    if is_maximizing:
        max_eval=-math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j]==' ':
                    board[i][j]='O'
                    eval=minimax(board,depth+1,False,alpha, beta)
                    board[i][j]=' '
                    max_eval=max(max_eval,eval)
                    alpha=max(alpha,eval)
                    if beta<=alpha:
                        break
        return max_eval
    else:
        min_eval=math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j]==' ':
                    board[i][j]='X'
                    eval=minimax(board,depth+1,True,alpha,beta)
                    board[i][j]=' '
                    min_eval=min(min_eval,eval)
                    beta=min(beta,eval)
                    if beta<=alpha:
                        break
        return min_eval


def best_move(board):
    best_val=-math.inf
    move=(-1,-1)
    for i in range(3):
        for j in range(3):
            if board[i][j]==' ':
                board[i][j]='O'
                move_val=minimax(board,0,False,-math.inf,math.inf)
                board[i][j]=' '
                if move_val>best_val:
                    move=(i,j)
                    best_val=move_val
    return move


def play_game():
    board=[[' 'for _ in range(3)] for _ in range(3)]
    human='X'
    ai='O'

    print("Tic-Tac-Toe Game")
    print_board(board)

    for turn in range(9):
        if turn % 2==0:
            print("Human's turn")
            row, col = map(int, input("Enter row and column (0,1,2): ").split())
            if board[row][col]!=' ':
                print("Invalid move try again.")
                continue
            board[row][col]=human
        else:
            print("AI's turn")
            row, col = best_move(board)
            board[row][col] = ai

        print_board(board)

        if check_winner(board, human):
            print("Human wins")
            return
        if check_winner(board, ai):
            print("AI wins")
            return

    print("It's a draw")


play_game()
